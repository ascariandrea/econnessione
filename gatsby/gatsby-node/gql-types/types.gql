# Common 

interface BaseFrontmatter {
  createdAt: Date!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

interface ByGroupOrActor { 
 	 type: String! 
 }
type ByGroup implements Node & ByGroupOrActor  @dontInfer {
  group: GroupFrontmatter! @link(by: "uuid")
  type: String!
} 

type ByActor implements Node & ByGroupOrActor  @dontInfer {
  actor: ActorFrontmatter! @link(by: "uuid")
  type: String!
} 

interface For { 
 	 type: String! 
 }
type ForProject implements Node & For  @dontInfer {
  project: ProjectFrontmatter! @link(by: "uuid")
  type: String!
} 

type ForGroup implements Node & For  @dontInfer {
  group: GroupFrontmatter! @link(by: "uuid")
  type: String!
} 

type MoneyAmount implements Node @dontInfer {
  amount: Int!
  currency: String!
} 

interface Impact { 
 	 type: String! 
 }
type LandUsed implements Node & Impact  @dontInfer {
  area: Int!
  type: String!
} 

type CO2Emitted implements Node & Impact  @dontInfer {
  amount: Int!
  type: String!
} 

type BiodiversityLoss implements Node & Impact  @dontInfer {
  deaths: Int!
  specie: String!
  type: String!
} 

type ImageSource implements Node @dontInfer {
  author: String!
  description: String
  image: File! @fileByRelativePath
} 

type ImageFileNode implements Node @dontInfer {
  publicURL: String!
} 

type Point implements Node @dontInfer {
  type: String!
} 

type Polygon implements Node @dontInfer {
  type: String!
} 

# Frontmatter 

type ArticleFrontmatter implements Node & BaseFrontmatter @dontInfer {
  createdAt: Date!
  draft: Boolean!
  featuredImage: File! @fileByRelativePath
  links: [String!]
  path: String!
  title: String!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type AreaFrontmatter implements Node & BaseFrontmatter @dontInfer {
  color: String!
  createdAt: Date!
  groups: [GroupFrontmatter!] @link(by: "uuid")
  label: String!
  polygon: String!
  topics: [TopicFrontmatter!] @link(by: "uuid")
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type ActorFrontmatter implements Node & BaseFrontmatter @dontInfer {
  avatar: File @fileByRelativePath
  color: String!
  createdAt: Date!
  fullName: String!
  type: String!
  updatedAt: Date!
  username: String!
  uuid: String!
} 

type GroupFrontmatter implements Node & BaseFrontmatter @dontInfer {
  avatar: File @fileByRelativePath
  color: String!
  createdAt: Date!
  kind: String!
  members: [ActorFrontmatter!] @link(by: "uuid")
  name: String!
  subGroups: [GroupFrontmatter!] @link(by: "uuid")
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type PageFrontmatter implements Node & BaseFrontmatter @dontInfer {
  createdAt: Date!
  path: String!
  title: String!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type ProjectFrontmatter implements Node & BaseFrontmatter @dontInfer {
  areas: [String!]!
  color: String!
  createdAt: Date!
  endDate: Date
  images: [ImageSource!]
  name: String!
  startDate: Date!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type TopicFrontmatter implements Node & BaseFrontmatter @dontInfer {
  color: String!
  createdAt: Date!
  label: String!
  slug: String!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type Protest implements Node & BaseFrontmatter @dontInfer {
  createdAt: Date!
  date: Date!
  for: For!
  images: [ImageSource!]!
  organizers: [ByGroupOrActor!]
  title: String!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type TransactionFrontmatter implements Node & BaseFrontmatter @dontInfer {
  amount: Int!
  by: ByGroupOrActor!
  createdAt: Date!
  date: Date!
  sources: [String!]
  to: ByGroupOrActor!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type PublicAnnouncement implements Node & BaseFrontmatter @dontInfer {
  createdAt: Date!
  date: Date!
  from: [ByGroupOrActor!]!
  publishedBy: [ByGroupOrActor!]!
  title: String!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type Uncategorized implements Node & BaseFrontmatter @dontInfer {
  actors: [ActorFrontmatter!] @link(by: "uuid")
  createdAt: Date!
  date: Date!
  groups: [GroupFrontmatter!] @link(by: "uuid")
  images: [ImageSource!]
  links: [String!]
  location: String
  title: String!
  topics: [TopicFrontmatter!] @link(by: "uuid")
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type Fined implements Node & BaseFrontmatter @dontInfer {
  amount: MoneyAmount!
  createdAt: Date!
  date: Date!
  from: [ByGroupOrActor!]!
  title: String!
  type: String!
  updatedAt: Date!
  uuid: String!
  who: ByGroupOrActor!
} 

type StudyPublished implements Node & BaseFrontmatter @dontInfer {
  createdAt: Date!
  date: Date!
  from: [ByGroupOrActor!]!
  source: String!
  title: String!
  type: String!
  updatedAt: Date!
  uuid: String!
} 

type Mdx implements Node { frontmatter: Frontmatter }