interface BaseFrontmatter {
  uuid: String!
  date: Date!
}

type ArticleFrontmatter implements Node & BaseFrontmatter @dontInfer {
  uuid: String!
  draft: Boolean!
  title: String!
  path: String!
  date: Date!
  links: [String!]
}

type ActorFrontmatter implements Node & BaseFrontmatter @dontInfer {
  uuid: String!
  fullName: String
  username: String
  avatar: File! @fileByRelativePath
  color: String
  date: Date!
}

type GroupFrontmatter implements Node & BaseFrontmatter @dontInfer {
  uuid: String!
  name: String!
  avatar: File! @fileByRelativePath
  members: [ActorFrontmatter!]
  date: Date!
  color: String
}

type PageFrontmatter implements Node & BaseFrontmatter @dontInfer {
  uuid: String!
  title: String!
  path: String!
  date: Date!
  slug: String!
}

# Topics
type TopicFrontmatter implements Node & BaseFrontmatter @dontInfer {
  uuid: String!
  slug: String!
  label: String!
  date: Date!
  color: String
}

# Events
type EventFrontmatter implements Node & BaseFrontmatter @dontInfer {
  uuid: String!
  title: String!
  date: Date!
  type: String
  location: String
  groups: [GroupFrontmatter!]
  topics: [TopicFrontmatter!]
  actors: [ActorFrontmatter!]
  links: [String!]
}


type MarkdownRemarkFrontmatter implements BaseFrontmatter {
  uuid: String!
  date: Date!
}

type MarkdownRemark implements Node {
  frontmatter: Frontmatter
}
